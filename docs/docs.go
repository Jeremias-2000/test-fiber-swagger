// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    
    "paths": {
        "/api/user/:id": {
            "get": {
                "description": "fetch user registered",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "fetch user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.User"
                        }
                    }
                    ,
        "security": [
          {
            "teste_scopes": []
          }
        ],
        "x-codegen-request-body-name": "body"
                }
            }
        },
        "/api/user/signin": {
            "post": {
                "description": "Register a new user",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "create user",
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/routes.User"
                        }
                    }
                    ,
        "security": [
          {
            "teste_scopes": []
          }
        ],
        "x-codegen-request-body-name": "body"
                }
            }
        },
        "/api/user/unsubscribe/:id": {
            "delete": {
                "description": "delete user registered",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "delete user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                    ,
        "security": [
          {
            "teste_scopes": []
          }
        ],
        "x-codegen-request-body-name": "body"
                }
            }
        },
        "/api/user/update/:id": {
            "put": {
                "description": "Update user data",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "update user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.User"
                        }
                    }
                    ,
        "security": [
          {
            "teste_scopes": []
          }
        ],
        "x-codegen-request-body-name": "body"
                }
            }
        },
        "/api/users": {
            "get": {
                "description": "Show the users registered",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Show users",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/routes.User"
                            }
                        }
                    }
                    ,
        "security": [
          {
            "teste_scopes": []
          }
        ],
        "x-codegen-request-body-name": "body"
                }
            }
        }
    },
    "definitions": {
        "routes.User": {
            "type": "object",
            "properties": {
                "first_name": {
                    "type": "string"
                },
                "id": {
                    "description": "this is not the model User, see this as the serializer",
                    "type": "integer"
                },
                "last_name": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "teste_scopes": {
          "type": "oauth2",
          "flow": "implicit",
          "authorizationUrl": "https://example.com/oauth/authorize",
          "scopes": {
            "teste_consulta_scope": "TESTE_CONSULTA_API"
          }
        }
      },
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "2.0",
	Host:             "localhost:3000",
	BasePath:         "/",
	Schemes:          []string{"http"},
	Title:            "Fiber Swagger Example API",
	Description:      "This is a sample server server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
